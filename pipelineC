
pipeline {
    agent any
    environment{
        repoA_url = "https://github.com/LeaZamora/repoA.git"
        doxygen_file = "Doxygen_B_cfg"
        archive_Name = 'doc.tar.gz'
        repoC_url = "https://github.com/LeaZamora/repoC.git"
        parser_out_file = "doxygen_parser_result.csv"
        
    }
    stages{
        stage('Clean Workspace'){
            steps{
            echo 'Clean up workspace'
            sh "rm -rf *"
            sh "rm -rf '${doxygen_file}'"
            }
        }

        stage('clone repoA'){
            steps{
                echo "Cloning repo '${repoA_url}'"
                sh "git clone ${repoA_url}"
            }
        }

        stage('generate Doxygen File'){
            steps{
             echo "Generate '${doxygen_file}' "
             sh "doxygen -g '${doxygen_file}'"
            }
        }

        stage('Modify doxygen File'){
            steps{
                echo "Modify generated  '${doxygen_file}' "
                sh "chmod +w '${doxygen_file}' "
                sh 'sed -i \'s/WARN_LOGFILE\\b.*=/WARN_LOGFILE\\t=\\t\\t\\"warning_logfile.txt\\"/g\' "${doxygen_file}"'
                sh 'sed -i \'s/INPUT\\b.*=/INPUT\\t\\t=  src/g\' "${doxygen_file}"'
                //sh 'sed -i \'s/WARN_FORMAT\\b.*=.*"\\$file:\\$line: \\$text"/WARN_FORMAT = "\\$file||\\$line|| \\$text"/\' "${doxygen_file}"'
                sh 'sed -i \'s/GENERATE_LATEX\\b.*=.*YES/GENERATE_LATEX\\t\\t=\\t\\t NO/g\' "${doxygen_file}"'
                sh 'sed -i \'s/RECURSIVE\\b.*=.*NO/RECURSIVE\\t\\t=\\t\\t YES/g\' "${doxygen_file}"'
                //sh 'sed -i 's/OUTPUT_DIRECTORY\b.*=/OUTPUT_DIRECTORY\t\t=\t\t doxygen_results/g' "${doxygen_file}"'
                }
                
            }

        stage('Run Doxygen'){
            steps{
                echo "Execute Doxygen which generated html output"
                sh '''
                cp "${doxygen_file}" "${WORKSPACE}"/repoA/.
                cd "${WORKSPACE}"/repoA
                pwd
                doxygen "${doxygen_file}"
                '''
                
            }
        }
        
        stage("Clone RepoC")
        {
            steps{
                echo "Cloning repoC"
                sh 'git clone "${repoC_url}"'
            }
        }
        
        stage("Python installation"){
            steps{
                echo "Check if python installed and install if no python found"
                sh '''
                 if ! command -v python3 &> /dev/null; then 
                    echo "python is not installed"
                    #install python
                    sudo apt-get install -y python3 python3-venv python3-pip
                 else
                    echo "python installed"
                    python3 --version
                fi
        
                '''
                }
            }
            stage("Execute python Script"){
                steps{
                    echo "Execute python scrips..."
                    sh '''
                    python3 -m venv testEnv
                    . testEnv/bin/activate
                    python3 ${WORKSPACE}/repoC/doxygenlogparser/doxygenlogparser/log_parser.py --warning_log_file "${WORKSPACE}"/repoA/warning_logfile.txt --output "${parser_out_file}"
                    
                    '''
                    
                }
                
            }
        
        stage('Archive artifacts'){
            steps{
                echo "Archiving..."
                sh '''
                tar -zcvf "${WORKSPACE}"/doc.tar.gz "${WORKSPACE}"/repoA/html/ "${WORKSPACE}"/repoA/warning_logfile.txt "${WORKSPACE}"/"${parser_out_file}"
            
                '''
                archiveArtifacts artifacts: "${archive_Name}", followSymlinks: false
            }
        }
    }

  }

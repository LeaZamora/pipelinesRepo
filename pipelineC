
pipeline {
    agent any
    environment{
        repoA_url = "https://github.com/LeaZamora/repoA.git"
        doxygen_file = "Doxygen_B_cfg"
        archive_NAME = "doc.tar.gz"
        python_repo = ""  
        doxygen_log_parser_csv = "output_log_parse.csv"      
    }
    stages{
        stage('Clean Workspace'){
            steps{
            echo 'Clean up workspace'
             sh "rm -rf *"
             sh "rm -rf '${doxygen_file}'"
            }
        }

        stage('clone repoA'){
            steps{
                echo "Cloning repo '${repoA_url}'"
                sh "git clone ${repoA_url}"
            }
        }

        stage('generate Doxygen File'){
            steps{
             echo "Generate '${doxygen_file}' "
             sh "doxygen -g '${doxygen_file}'"
            }
        }

        stage('Modify doxygen File'){
            steps{
                echo "Modify generated  '${doxygen_file}' "
                sh "chmod +w '${doxygen_file}' "
                sh 'sed -i \'s/WARN_LOGFILE\\b.*=/WARN_LOGFILE\\t=\\t\\t\\"warning_logfile.txt\\"/g\' "${doxygen_file}"'
                sh 'sed -i \'s/INPUT\\b.*=/INPUT\\t\\t=  src/g\' "${doxygen_file}"'
                sh 'sed -i \'s/WARN_FORMAT\\b.*=.*"\\$file:\\$line: \\$text"/WARN_FORMAT = "\\$file||\\$line|| \\$text"/\' "${doxygen_file}"'
                sh 'sed -i \'s/GENERATE_LATEX\\b.*=.*YES/GENERATE_LATEX\\t\\t=\\t\\t NO/g\' "${doxygen_file}"'
                sh 'sed -i \'s/RECURSIVE\\b.*=.*NO/RECURSIVE\\t\\t=\\t\\t YES/g\' "${doxygen_file}"'
                }
            }

        stage('Run Doxygen'){
            steps{
                echo "Execute Doxygen which generated html output"
                sh '''
                cp "${doxygen_file}" "${WORKSPACE}"/repoA/.
                cd "${WORKSPACE}"/repoA
                pwd
                doxygen "${doxygen_file}"
                '''
                
                
            }
        }
        stage(" check if python is installed and Install Python if no python")
        {
            steps{
                sh '''
                 if ! command -v python3 &> /dev/null; then 
                    echo "python is not installed"
                    #install python
                    sudo apt-get install -y python3 python3-venv python3-pip
                 else
                    echo "python installed"
                    python3 --version
                fi
        
                '''
        
            }    
        }

        stage("create virtualenv and execute python")
        {
            steps{
                sh '''
                python3  -m venv testparserenv
                source testparserenv/bin/activate
                echo "install python package"
                echo "execute python"

                '''
            }
        }

        stage("Zip files for archiving")
        {
            steps{
                                
                //sh'''
                //cp 
                //cd "${WORKSPACE}"/repoA
                //tar -zcvf doc.tar.gz ${WORKSPACE}/repoA/html/ ${WORKSPACE}/repoA/warning_logfile.txt "${doxygen_log_parser_csv}"
                //mv doc.tar.gz "${WORKSPACE}"/.
                
                //'''
            }
        }
        
        stage('Archive artifacts'){
            steps{
                echo "Archiving..."
                archiveArtifacts artifacts: "${archive_Name}", followSymlinks: false
            }
        }
    }

}